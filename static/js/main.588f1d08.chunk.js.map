{"version":3,"sources":["components/Home/Home.jsx","assets/fruits.svg","components/Snake/Fruit/Fruit.jsx","gameLibrary/GameBoard.js","gameLibrary/Snake.js","gameLibrary/WeightedRandom.js","util.js","components/Snake/Snake.jsx","App.js","reportWebVitals.js","index.js"],"names":["Home","to","Fruit","name","width","height","href","Fruits","Scores","Names","Object","keys","ProbabilityWeights","values","sum","reduce","acc","curr","map","v","Memoized","React","memo","GameBoard","rowCount","colCount","getCellNum","row","col","this","counter","currRow","push","Node","value","next","Snake","board","startRow","startCol","wrappedMode","reset","node","cellNum","Set","Direction","Right","grow","tgtRow","tgtCol","tgtCellNum","add","delete","rowDelta","Down","Up","colDelta","Left","newDirection","moveTo","WeightedRandom","items","weights","length","Error","cumulativeWeights","i","randomNumber","Math","random","randomNumberGenerator","min","max","floor","SnakeGame","useState","ROWS","rand","snake","fruitRandomizer","getRandomItem","fruit","setFruit","fruitCellNums","setFruitCellNums","occupiedCellNums","snakeCellNums","setSnakeCellNums","isGameOver","setIsGameOver","score","setScore","swipeableHandlers","useSwipeable","onSwipedUp","changeDirection","onSwipedRight","onSwipedDown","onSwipedLeft","preventDefaultTouchmoveEvent","handleKeydown","useCallback","e","key","endGame","useEffect","window","addEventListener","callback","delay","savedCallback","useRef","current","id","setInterval","clearInterval","useInterval","move","has","prevState","className","cells","j","SnakeCell","onClick","App","path","element","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.588f1d08.chunk.js","sourcesContent":["import React from 'react';\nimport { Link } from 'react-router-dom';\nimport './Home.scss';\n\nfunction Home() {\n  return (\n    <main>\n      <h1>Select a Game</h1>\n      <nav>\n        <ul>\n          <li><Link to=\"/snake\">Snake</Link></li>\n        </ul>\n      </nav>\n    </main>\n  );\n}\n\nexport default Home;","export default __webpack_public_path__ + \"static/media/fruits.1da5ebaf.svg\";","import React from 'react';\nimport Fruits from '../../../assets/fruits.svg';\n\nfunction Fruit({ name }) {\n  return (\n    <svg width={'100%'} height={'100%'}>\n      <use href={`${Fruits}#${name}`}/>\n    </svg>\n  );\n}\n\n\nFruit.Scores = {\n  'apple': 100,\n  'carrot': 100,\n  'banana': 100,\n  'pear': 100,\n  'orange': 250,\n  'watermelon': 250,\n  'strawberry': 500,\n  'grapes': 1000,\n};\n\nFruit.Names = Object.keys(Fruit.Scores);\n\nFruit.ProbabilityWeights = () => {\n  const values = Object.values(Fruit.Scores);\n  const sum = values.reduce((acc, curr) => acc + curr);\n  return values.map(v => sum / v);\n};\n\nFruit.Memoized = React.memo(({ name }) => <Fruit name={name}/>);\n\nexport default Fruit;\n","export default class GameBoard {\n  #rowCount;\n  #colCount;\n  #cells;\n\n  constructor(rowCount, colCount) {\n    this.#rowCount = rowCount;\n    this.#colCount = colCount;\n    this.#cells = [];\n\n    let counter = 1;\n    for ( let row = 0; row < rowCount; row++ ) {\n      const currRow = [];\n      for ( let col = 0; col < colCount; col++ ) {\n        currRow.push(counter++);\n      }\n      this.#cells.push(currRow);\n    }\n  }\n\n  get rowCount() {\n    return this.#rowCount;\n  }\n\n  get colCount() {\n    return this.#colCount;\n  }\n\n  get cells() {\n    return this.#cells;\n  }\n\n  getCellNum = (row, col) => {\n    const isValidCell = (0 <= row && row < this.#rowCount) && (0 <= col && col < this.#colCount);\n    return (isValidCell) ? this.#cells[row][col] : null;\n  };\n}","class Node {\n  constructor(value) {\n    this.value = value;\n    this.next = null;\n  }\n}\n\nexport default class Snake {\n  #head; // head of the snake\n  #tail; // head of the linked list\n  #board;\n  #occupiedCellNums;\n  #direction;\n  #wrappedMode;\n\n  constructor(board, startRow, startCol, wrappedMode = true) {\n    this.#board = board;\n    this.#wrappedMode = wrappedMode;\n    this.#initSnake(startRow, startCol);\n  }\n\n  get occupiedCellNums() {\n    return this.#occupiedCellNums;\n  }\n\n  changeDirection(newDirection) {\n    this.#direction = newDirection;\n  }\n\n  move(moveTo) {\n    const { tgtRow, tgtCol } = this.#getNext();\n    const { tgtCellNum, grow } = moveTo(tgtRow, tgtCol);\n\n    if (tgtCellNum) {\n      this.#updateSnake({ tgtRow, tgtCol, tgtCellNum }, grow);\n    }\n  }\n\n  reset = (startRow, startCol) => this.#initSnake(startRow, startCol);\n\n  #initSnake = (startRow, startCol) => {\n    const node = new Node({\n      row: startRow,\n      col: startCol,\n      cellNum: this.#board.getCellNum(startRow, startCol),\n    });\n\n    this.#head = node;\n    this.#tail = node;\n    this.#occupiedCellNums = new Set([node.value.cellNum]);\n    this.#direction = Snake.Direction.Right;\n  }\n\n  #updateSnake = ({ tgtRow, tgtCol, tgtCellNum }, grow) => {\n    const next = new Node({ row: tgtRow, col: tgtCol, cellNum: tgtCellNum });\n\n    this.#head.next = next;\n    this.#head = next;\n    this.#occupiedCellNums.add(tgtCellNum);\n\n    if (!grow) {\n      this.#occupiedCellNums.delete(this.#tail.value.cellNum);\n      this.#tail = this.#tail.next;\n    }\n  };\n\n  #getNext = () => {\n    const rowDelta = this.#direction === Snake.Direction.Down ? 1 : this.#direction === Snake.Direction.Up ? -1 : 0;\n    const colDelta = this.#direction === Snake.Direction.Right ? 1 : this.#direction === Snake.Direction.Left ? -1 : 0;\n\n    let tgtRow = this.#head.value.row + rowDelta;\n    let tgtCol = this.#head.value.col + colDelta;\n\n    if (!this.#board.getCellNum(tgtRow, tgtCol) && this.#wrappedMode) {\n      if (rowDelta === 1) {\n        tgtRow = 0;\n      } else if (rowDelta === -1) {\n        tgtRow = this.#board.rowCount - 1;\n      } else if (colDelta === 1) {\n        tgtCol = 0;\n      } else if (colDelta === -1) {\n        tgtCol = this.#board.colCount - 1;\n      }\n    }\n\n    return { tgtRow, tgtCol };\n  };\n}\n\nSnake.Direction = {\n  Up: 'UP',\n  Down: 'DOWN',\n  Left: 'LEFT',\n  Right: 'RIGHT',\n};","export default class WeightedRandom {\n  #items;\n  #cumulativeWeights;\n\n  constructor(items, weights) {\n    if (items.length !== weights.length) {\n      throw new Error('Items and weights must be of the same size');\n    }\n\n    if (!items.length) {\n      throw new Error('Items must not be empty');\n    }\n\n    const cumulativeWeights = [];\n    for ( let i = 0; i < weights.length; i += 1 ) {\n      cumulativeWeights[i] = weights[i] + (cumulativeWeights[i - 1] || 0);\n    }\n\n    this.#items = items;\n    this.#cumulativeWeights = cumulativeWeights;\n  }\n\n  getRandomItem() {\n    const randomNumber = this.#cumulativeWeights[this.#cumulativeWeights.length - 1] * Math.random();\n    for ( let i = 0; i < this.#items.length; i++ ) {\n      if (this.#cumulativeWeights[i] >= randomNumber) {\n        return this.#items[i];\n      }\n    }\n  }\n}\n","import { useEffect, useRef } from 'react';\n\nexport function* randomNumberGenerator(min, max) {\n  while (true) {\n    yield Math.floor(Math.random() * (max - min + 1) + min);\n  }\n}\n\n// Copied from https://overreacted.io/making-setinterval-declarative-with-react-hooks/\nexport function useInterval(callback, delay) {\n  const savedCallback = useRef();\n\n  // Remember the latest callback.\n  useEffect(() => {\n    savedCallback.current = callback;\n  }, [callback]);\n\n  // Set up the interval.\n  useEffect(() => {\n    function tick() {\n      savedCallback.current();\n    }\n\n    if (delay !== null) {\n      let id = setInterval(tick, delay);\n      return () => clearInterval(id);\n    }\n  }, [delay]);\n}","import React, { useCallback, useEffect, useState } from 'react';\nimport { useSwipeable } from 'react-swipeable';\nimport Fruit from './Fruit/Fruit';\nimport { GameBoard, Snake, WeightedRandom } from '../../gameLibrary';\nimport { randomNumberGenerator, useInterval } from '../../util';\nimport './Snake.scss';\n\nconst ROWS = 10;\nconst COLUMNS = 10;\nconst START_ROW = 2;\nconst START_COLUMN = 2;\nconst FPS = 5;\n\nfunction SnakeGame() {\n  const [rand] = useState(randomNumberGenerator(1, ROWS * COLUMNS));\n  const [board] = useState(new GameBoard(ROWS, COLUMNS));\n  const [snake] = useState(new Snake(board, START_ROW, START_COLUMN));\n  const [fruitRandomizer] = useState(new WeightedRandom(Fruit.Names, Fruit.ProbabilityWeights()));\n  const [fruit, setFruit] = useState(fruitRandomizer.getRandomItem());\n  const [fruitCellNums, setFruitCellNums] = useState(new Set([rand.next().value]));\n  const [snakeCellNums, setSnakeCellNums] = useState(snake.occupiedCellNums);\n  const [isGameOver, setIsGameOver] = useState(false);\n  const [score, setScore] = useState(0);\n\n  const swipeableHandlers = useSwipeable({\n    onSwipedUp: () => snake.changeDirection(Snake.Direction.Up),\n    onSwipedRight: () => snake.changeDirection(Snake.Direction.Right),\n    onSwipedDown: () => snake.changeDirection(Snake.Direction.Down),\n    onSwipedLeft: () => snake.changeDirection(Snake.Direction.Left),\n    preventDefaultTouchmoveEvent: true,\n  });\n\n  const handleKeydown = useCallback((e) => {\n    const getDirectionFromKey = key => {\n      if (key === 'ArrowUp') return Snake.Direction.Up;\n      if (key === 'ArrowRight') return Snake.Direction.Right;\n      if (key === 'ArrowDown') return Snake.Direction.Down;\n      if (key === 'ArrowLeft') return Snake.Direction.Left;\n      return '';\n    };\n\n    const newDirection = getDirectionFromKey(e.key);\n    if (!!newDirection) {\n      snake.changeDirection(newDirection);\n    }\n  }, [snake]);\n\n  useEffect(() => {\n    window.addEventListener('keydown', e => handleKeydown(e));\n  }, [handleKeydown]);\n\n  useInterval(() => {\n    moveSnake();\n  }, isGameOver ? null : (1000 / FPS));\n\n  function endGame() {\n    setIsGameOver(true);\n  }\n\n  function startOver() {\n    snake.reset(START_ROW, START_COLUMN);\n    setIsGameOver(false);\n  }\n\n  function moveSnake() {\n    snake.move((row, col) => {\n      const tgtCellNum = board.getCellNum(row, col);\n\n      if (!tgtCellNum) {\n        endGame();\n        return {};\n      }\n\n      if (snakeCellNums.has(tgtCellNum)) {\n        endGame();\n        return {};\n      }\n\n      if (fruitCellNums.has(tgtCellNum)) {\n        setScore(prevState => prevState + Fruit.Scores[fruit]);\n        setFruit(fruitRandomizer.getRandomItem());\n        setFruitCellNums(new Set([rand.next().value]));\n        return { tgtCellNum, grow: true };\n      }\n\n      return { tgtCellNum, grow: false };\n    });\n\n    setSnakeCellNums(new Set(snake.occupiedCellNums));\n  }\n\n  return (\n    <>\n      <main {...swipeableHandlers}>\n        <h1>Snake</h1>\n        <div className=\"snake__board\">\n          {board.cells.map((row, i) => (\n            <div key={i} className=\"row\">\n              {row.map((cellNum, j) => (\n                <div key={j} className={'cell'}>\n                  {snakeCellNums.has(cellNum) && <SnakeGame.SnakeCell/>}\n                  {fruitCellNums.has(cellNum) && <Fruit.Memoized name={fruit}/>}\n                </div>\n              ))}\n            </div>\n          ))}\n        </div>\n        <div className=\"snake__score\">Score: {score}</div>\n        {isGameOver && (\n          <button className=\"snake__btn\" onClick={startOver}>Try Again</button>\n        )}\n      </main>\n      <footer>\n        <a href=\"https://www.vecteezy.com/free-vector/fruit-icon\">Fruit Icon Vectors by Vecteezy</a>\n      </footer>\n    </>\n  );\n}\n\nSnakeGame.SnakeCell = () => <div className=\"cell cell--snake\"/>;\n\nexport default SnakeGame;\n","import React from 'react';\nimport { Routes, Route, Link } from 'react-router-dom';\nimport Home from './components/Home/Home';\nimport Snake from './components/Snake/Snake';\nimport './App.scss';\n\nfunction App() {\n  return (\n    <div className=\"app-container\">\n      <header>\n        <Link to=\"/\">Games</Link>\n      </header>\n      <Routes>\n        <Route path=\"/\" element={<Home/>}/>\n        <Route path=\"/snake\" element={<Snake/>}/>\n      </Routes>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <BrowserRouter>\n      <App/>\n    </BrowserRouter>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}