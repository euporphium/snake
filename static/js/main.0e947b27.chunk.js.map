{"version":3,"sources":["util.js","gameLibrary/GameBoard.js","gameLibrary/Snake.js","components/Snake/SnakeGame.jsx","components/Nonogram/NonogramGame.jsx","App.js","reportWebVitals.js","index.js"],"names":["randomNumberGenerator","min","max","Math","floor","random","useInterval","callback","delay","savedCallback","useRef","useEffect","current","id","setInterval","clearInterval","GameBoard","rowCount","colCount","getCells","getCellNum","row","col","this","counter","currRow","push","Direction","Node","value","next","Snake","board","startRow","startCol","getOccupiedCellNums","grow","cellNum","add","delete","rowDelta","colDelta","tgtRow","tgtCol","node","Set","newDirection","moveTo","SnakeGame","debug","useState","ROWS","rand","snake","foodCellNums","setFoodCellNums","snakeCellNums","setSnakeCellNums","handleKeydown","e","key","changeDirection","moveSnake","move","tgtCellNum","has","getCellClass","window","addEventListener","onClick","className","map","i","j","NonogramGame","App","to","path","element","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.0e947b27.chunk.js","sourcesContent":["import { useEffect, useRef } from 'react';\n\nexport function* randomNumberGenerator(min, max) {\n  while (true) {\n    yield Math.floor(Math.random() * (max - min + 1) + min);\n  }\n}\n\n// Copied from https://overreacted.io/making-setinterval-declarative-with-react-hooks/\nexport function useInterval(callback, delay) {\n  const savedCallback = useRef();\n\n  // Remember the latest callback.\n  useEffect(() => {\n    savedCallback.current = callback;\n  }, [callback]);\n\n  // Set up the interval.\n  useEffect(() => {\n    function tick() {\n      savedCallback.current();\n    }\n\n    if (delay !== null) {\n      let id = setInterval(tick, delay);\n      return () => clearInterval(id);\n    }\n  }, [delay]);\n}","export default class GameBoard {\n  #rowCount;\n  #colCount;\n  #board;\n\n  constructor(rowCount, colCount) {\n    this.#rowCount = rowCount;\n    this.#colCount = colCount;\n    this.#board = [];\n\n    let counter = 1;\n    for ( let row = 0; row < rowCount; row++ ) {\n      const currRow = [];\n      for ( let col = 0; col < colCount; col++ ) {\n        currRow.push(counter++);\n      }\n      this.#board.push(currRow);\n    }\n  }\n\n  getCells = () => this.#board;\n\n  getCellNum = (row, col) => {\n    const isValidCell = (0 <= row && row < this.#rowCount) && (0 <= col && col < this.#colCount);\n    return (isValidCell) ? this.#board[row][col] : null;\n  };\n}","// TODO where to put this? duplicated in SnakeGame\nconst Direction = {\n  Up: 'UP',\n  Down: 'DOWN',\n  Left: 'LEFT',\n  Right: 'RIGHT',\n};\n\nclass Node {\n  constructor(value) {\n    this.value = value;\n    this.next = null;\n  }\n}\n\nexport default class Snake {\n  #head; // head of the snake\n  #tail; // head of the linked list\n  #occupiedCellNums;\n  #direction;\n\n  constructor(board, startRow, startCol) {\n    const node = new Node({\n      row: startRow,\n      col: startCol,\n      cellNum: board.getCellNum(startRow, startCol),\n    });\n\n    this.#head = node;\n    this.#tail = node;\n    this.#occupiedCellNums = new Set([node.value.cellNum]);\n    this.#direction = Direction.Right;\n  }\n\n  changeDirection(newDirection) {\n    this.#direction = newDirection;\n  }\n\n  getOccupiedCellNums = () => this.#occupiedCellNums;\n\n  move(moveTo) {\n    const { tgtRow, tgtCol } = this.#getNext();\n    const { row, col, cellNum, grow } = moveTo(tgtRow, tgtCol);\n\n    if (cellNum) {\n      this.#updateSnake({ row, col, cellNum }, grow);\n    }\n  }\n\n  #updateSnake = ({ row, col, cellNum }, grow) => {\n    const next = new Node({ row, col, cellNum });\n\n    this.#head.next = next;\n    this.#head = next;\n    this.#occupiedCellNums.add(cellNum);\n\n    if (!grow) {\n      this.#occupiedCellNums.delete(this.#tail.value.cellNum);\n      this.#tail = this.#tail.next;\n    }\n  };\n\n  #getNext = () => {\n    const rowDelta = this.#direction === Direction.Down ? 1 : this.#direction === Direction.Up ? -1 : 0;\n    const colDelta = this.#direction === Direction.Right ? 1 : this.#direction === Direction.Left ? -1 : 0;\n    return {\n      tgtRow: this.#head.value.row + rowDelta,\n      tgtCol: this.#head.value.col + colDelta,\n    };\n  };\n}","import React, { useEffect, useState } from 'react';\nimport { randomNumberGenerator, useInterval } from '../../util';\nimport { GameBoard, Snake } from '../../gameLibrary';\nimport './Snake.scss';\n\nconst ROWS = 10;\nconst COLUMNS = 10;\nconst START_ROW = 2;\nconst START_COLUMN = 2;\nconst FPS = 5;\n\n// TODO where to put this? duplicated in Snake\nconst Direction = {\n  Up: 'UP',\n  Down: 'DOWN',\n  Left: 'LEFT',\n  Right: 'RIGHT',\n};\n\nfunction SnakeGame({ debug = false } = {}) {\n  const [rand] = useState(randomNumberGenerator(1, ROWS * COLUMNS));\n  const [board] = useState(new GameBoard(ROWS, COLUMNS));\n  const [snake] = useState(new Snake(board, START_ROW, START_COLUMN));\n\n  const [foodCellNums, setFoodCellNums] = useState(new Set([rand.next().value]));\n  const [snakeCellNums, setSnakeCellNums] = useState(snake.getOccupiedCellNums());\n\n  const handleKeydown = e => {\n    const getDirectionFromKey = key => {\n      if (key === 'ArrowUp') return Direction.Up;\n      if (key === 'ArrowRight') return Direction.Right;\n      if (key === 'ArrowDown') return Direction.Down;\n      if (key === 'ArrowLeft') return Direction.Left;\n      return '';\n    };\n\n    const newDirection = getDirectionFromKey(e.key);\n    if (!!newDirection) {\n      snake.changeDirection(newDirection);\n    }\n  };\n\n  useEffect(() => {\n    window.addEventListener('keydown', e => handleKeydown(e));\n  }, []);\n\n  useInterval(() => {\n    moveSnake();\n  }, 1000 / FPS);\n\n  function endGame() {\n\n  }\n\n  function moveSnake() {\n    snake.move((row, col) => {\n      const tgtCellNum = board.getCellNum(row, col);\n\n      if (!tgtCellNum) {\n        endGame();\n        return {};\n      }\n\n      if (snakeCellNums.has(tgtCellNum)) {\n        endGame();\n        return {};\n      }\n\n      if (foodCellNums.has(tgtCellNum)) {\n        setFoodCellNums(new Set([rand.next().value]));\n        return { row, col, cellNum: tgtCellNum, grow: true };\n      }\n\n      // row col might be different if snake can wrap\n      return { row, col, cellNum: tgtCellNum, grow: false };\n    });\n    setSnakeCellNums(new Set(snake.getOccupiedCellNums()));\n  }\n\n  function getCellClass(cellNum) {\n    if (snakeCellNums.has(cellNum)) {\n      return 'cell cell--snake';\n    }\n    if (foodCellNums.has(cellNum)) {\n      return 'cell cell--food';\n    }\n\n    return 'cell';\n  }\n\n  return (\n    <div id=\"snake-game\">\n      <h1>Snake</h1>\n      {debug && <button onClick={moveSnake}>Step</button>}\n      <div className=\"snake-game__board\">\n        {board.getCells().map((row, i) => (\n          <div key={i} className=\"row\">\n            {row.map((cellNum, j) => (\n              <div key={j} className={getCellClass(cellNum)}>\n                {debug && cellNum}\n              </div>\n            ))}\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n}\n\nexport default SnakeGame;\n","import React from 'react';\n\nexport default function NonogramGame({ debug = false } = {}) {\n  return (\n    <div id=\"nonogram-game\">\n      <h1>Snake</h1>\n      {/*{debug && <button onClick={moveSnake}>Step</button>}*/}\n    </div>\n  );\n}","import React from 'react';\nimport {\n  Routes,\n  Route, Link,\n} from 'react-router-dom';\nimport SnakeGame from './components/Snake/SnakeGame';\nimport NonogramGame from './components/Nonogram/NonogramGame';\nimport './App.scss';\n\nfunction App() {\n  return (\n    <div className=\"app-container\">\n      <header>\n        <span>Games</span>\n        <nav>\n          <ul>\n            <li><Link to=\"/\">Home</Link></li>\n            <li><Link to=\"/snake\">Snake</Link></li>\n            <li><Link to=\"/nonogram\">Nonogram</Link></li>\n          </ul>\n        </nav>\n      </header>\n      <main>\n        <Routes>\n          <Route path=\"/\" element={<></>}/>\n          <Route path=\"/snake\" element={<SnakeGame/>}/>\n          <Route path=\"/nonogram\" element={<NonogramGame/>}/>\n        </Routes>\n      </main>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <BrowserRouter>\n      <App/>\n    </BrowserRouter>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}