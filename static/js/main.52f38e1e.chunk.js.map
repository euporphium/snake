{"version":3,"sources":["util.js","gameLibrary/GameBoard.js","gameLibrary/Snake.js","components/Snake/SnakeGame.jsx","components/Nonogram/NonogramGame.jsx","App.js","reportWebVitals.js","index.js"],"names":["randomNumberGenerator","min","max","Math","floor","random","useInterval","callback","delay","savedCallback","useRef","useEffect","current","id","setInterval","clearInterval","GameBoard","rowCount","colCount","getCellNum","row","col","this","counter","currRow","push","Node","value","next","Snake","board","startRow","startCol","wrappedMode","grow","cellNum","add","delete","rowDelta","Direction","Down","Up","colDelta","Right","Left","tgtRow","tgtCol","node","Set","newDirection","moveTo","SnakeGame","debug","useState","ROWS","rand","snake","foodCellNums","setFoodCellNums","occupiedCellNums","snakeCellNums","setSnakeCellNums","isRunning","setIsRunning","swipeableHandlers","useSwipeable","onSwipedUp","changeDirection","onSwipedRight","onSwipedDown","onSwipedLeft","preventDefaultTouchmoveEvent","handleKeydown","e","key","endGame","moveSnake","move","tgtCellNum","has","getCellClass","window","addEventListener","onClick","className","cells","map","i","j","NonogramGame","App","to","path","element","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.52f38e1e.chunk.js","sourcesContent":["import { useEffect, useRef } from 'react';\n\nexport function* randomNumberGenerator(min, max) {\n  while (true) {\n    yield Math.floor(Math.random() * (max - min + 1) + min);\n  }\n}\n\n// Copied from https://overreacted.io/making-setinterval-declarative-with-react-hooks/\nexport function useInterval(callback, delay) {\n  const savedCallback = useRef();\n\n  // Remember the latest callback.\n  useEffect(() => {\n    savedCallback.current = callback;\n  }, [callback]);\n\n  // Set up the interval.\n  useEffect(() => {\n    function tick() {\n      savedCallback.current();\n    }\n\n    if (delay !== null) {\n      let id = setInterval(tick, delay);\n      return () => clearInterval(id);\n    }\n  }, [delay]);\n}","export default class GameBoard {\n  #rowCount;\n  #colCount;\n  #cells;\n\n  constructor(rowCount, colCount) {\n    this.#rowCount = rowCount;\n    this.#colCount = colCount;\n    this.#cells = [];\n\n    let counter = 1;\n    for ( let row = 0; row < rowCount; row++ ) {\n      const currRow = [];\n      for ( let col = 0; col < colCount; col++ ) {\n        currRow.push(counter++);\n      }\n      this.#cells.push(currRow);\n    }\n  }\n\n  get rowCount() {\n    return this.#rowCount;\n  }\n\n  get colCount() {\n    return this.#colCount;\n  }\n\n  get cells() {\n    return this.#cells;\n  }\n\n  getCellNum = (row, col) => {\n    const isValidCell = (0 <= row && row < this.#rowCount) && (0 <= col && col < this.#colCount);\n    return (isValidCell) ? this.#cells[row][col] : null;\n  };\n}","class Node {\n  constructor(value) {\n    this.value = value;\n    this.next = null;\n  }\n}\n\nexport default class Snake {\n  #head; // head of the snake\n  #tail; // head of the linked list\n  #board;\n  #occupiedCellNums;\n  #direction;\n  #wrappedMode;\n\n  constructor(board, startRow, startCol, wrappedMode = true) {\n    const node = new Node({\n      row: startRow,\n      col: startCol,\n      cellNum: board.getCellNum(startRow, startCol),\n    });\n\n    this.#head = node;\n    this.#tail = node;\n    this.#board = board;\n    this.#occupiedCellNums = new Set([node.value.cellNum]);\n    this.#direction = Snake.Direction.Right;\n    this.#wrappedMode = wrappedMode;\n  }\n\n  changeDirection(newDirection) {\n    this.#direction = newDirection;\n  }\n\n  get occupiedCellNums() {\n    return this.#occupiedCellNums;\n  }\n\n  move(moveTo) {\n    const { tgtRow, tgtCol } = this.#getNext();\n    const { row, col, cellNum, grow } = moveTo(tgtRow, tgtCol);\n\n    if (cellNum) {\n      this.#updateSnake({ row, col, cellNum }, grow);\n    }\n  }\n\n  #updateSnake = ({ row, col, cellNum }, grow) => {\n    const next = new Node({ row, col, cellNum });\n\n    this.#head.next = next;\n    this.#head = next;\n    this.#occupiedCellNums.add(cellNum);\n\n    if (!grow) {\n      this.#occupiedCellNums.delete(this.#tail.value.cellNum);\n      this.#tail = this.#tail.next;\n    }\n  };\n\n  #getNext = () => {\n    const rowDelta = this.#direction === Snake.Direction.Down ? 1 : this.#direction === Snake.Direction.Up ? -1 : 0;\n    const colDelta = this.#direction === Snake.Direction.Right ? 1 : this.#direction === Snake.Direction.Left ? -1 : 0;\n\n    let tgtRow = this.#head.value.row + rowDelta;\n    let tgtCol = this.#head.value.col + colDelta;\n\n    if (!this.#board.getCellNum(tgtRow, tgtCol) && this.#wrappedMode) {\n      if (rowDelta === 1) {\n        tgtRow = 0;\n      } else if (rowDelta === -1) {\n        tgtRow = this.#board.rowCount - 1;\n      } else if (colDelta === 1) {\n        tgtCol = 0;\n      } else if (colDelta === -1) {\n        tgtCol = this.#board.colCount - 1;\n      }\n    }\n\n    return { tgtRow, tgtCol };\n  };\n}\n\nSnake.Direction = {\n  Up: 'UP',\n  Down: 'DOWN',\n  Left: 'LEFT',\n  Right: 'RIGHT',\n};","import React, { useEffect, useState } from 'react';\nimport { useSwipeable } from 'react-swipeable';\nimport { randomNumberGenerator, useInterval } from '../../util';\nimport { GameBoard, Snake } from '../../gameLibrary';\nimport './Snake.scss';\n\nconst ROWS = 10;\nconst COLUMNS = 10;\nconst START_ROW = 2;\nconst START_COLUMN = 2;\nconst FPS = 5;\n\nfunction SnakeGame({ debug = false } = {}) {\n  const [rand] = useState(randomNumberGenerator(1, ROWS * COLUMNS));\n  const [board] = useState(new GameBoard(ROWS, COLUMNS));\n  const [snake] = useState(new Snake(board, START_ROW, START_COLUMN));\n\n  const [foodCellNums, setFoodCellNums] = useState(new Set([rand.next().value]));\n  const [snakeCellNums, setSnakeCellNums] = useState(snake.occupiedCellNums);\n  const [isRunning, setIsRunning] = useState(true);\n\n  const swipeableHandlers = useSwipeable({\n    onSwipedUp: () => snake.changeDirection(Snake.Direction.Up),\n    onSwipedRight: () => snake.changeDirection(Snake.Direction.Right),\n    onSwipedDown: () => snake.changeDirection(Snake.Direction.Down),\n    onSwipedLeft: () => snake.changeDirection(Snake.Direction.Left),\n    preventDefaultTouchmoveEvent: true,\n  })\n\n  const handleKeydown = e => {\n    const getDirectionFromKey = key => {\n      if (key === 'ArrowUp') return Snake.Direction.Up;\n      if (key === 'ArrowRight') return Snake.Direction.Right;\n      if (key === 'ArrowDown') return Snake.Direction.Right;\n      if (key === 'ArrowLeft') return Snake.Direction.Left;\n      return '';\n    };\n\n    const newDirection = getDirectionFromKey(e.key);\n    if (!!newDirection) {\n      snake.changeDirection(newDirection);\n    }\n  };\n\n  useEffect(() => {\n    window.addEventListener('keydown', e => handleKeydown(e));\n  }, []);\n\n  useInterval(() => {\n    moveSnake();\n  }, isRunning ? (1000 / FPS) : null);\n\n  function endGame() {\n    setIsRunning(false);\n  }\n\n  function moveSnake() {\n    snake.move((row, col) => {\n      const tgtCellNum = board.getCellNum(row, col);\n\n      if (!tgtCellNum) {\n        endGame();\n        return {};\n      }\n\n      if (snakeCellNums.has(tgtCellNum)) {\n        endGame();\n        return {};\n      }\n\n      if (foodCellNums.has(tgtCellNum)) {\n        setFoodCellNums(new Set([rand.next().value]));\n        return { row, col, cellNum: tgtCellNum, grow: true };\n      }\n\n      // row col might be different if snake can wrap\n      return { row, col, cellNum: tgtCellNum, grow: false };\n    });\n    setSnakeCellNums(new Set(snake.occupiedCellNums));\n  }\n\n  function getCellClass(cellNum) {\n    if (snakeCellNums.has(cellNum)) {\n      return 'cell cell--snake';\n    }\n    if (foodCellNums.has(cellNum)) {\n      return 'cell cell--food';\n    }\n\n    return 'cell';\n  }\n\n  return (\n    <div id=\"snake-game\" {...swipeableHandlers}>\n      <h1>Snake</h1>\n      {debug && <button onClick={moveSnake}>Step</button>}\n      <div className=\"snake-game__board\">\n        {board.cells.map((row, i) => (\n          <div key={i} className=\"row\">\n            {row.map((cellNum, j) => (\n              <div key={j} className={getCellClass(cellNum)}>\n                {debug && cellNum}\n              </div>\n            ))}\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n}\n\nexport default SnakeGame;\n","import React from 'react';\n\nexport default function NonogramGame({ debug = false } = {}) {\n  return (\n    <div id=\"nonogram-game\">\n      <h1>Snake</h1>\n      {/*{debug && <button onClick={moveSnake}>Step</button>}*/}\n    </div>\n  );\n}","import React from 'react';\nimport { Routes, Route, Link } from 'react-router-dom';\nimport SnakeGame from './components/Snake/SnakeGame';\nimport NonogramGame from './components/Nonogram/NonogramGame';\nimport './App.scss';\n\nfunction App() {\n  return (\n    <div className=\"app-container\">\n      <header>\n        <span>Games</span>\n        <nav>\n          <ul>\n            <li><Link to=\"/\">Home</Link></li>\n            <li><Link to=\"/snake\">Snake</Link></li>\n            <li><Link to=\"/nonogram\">Nonogram</Link></li>\n          </ul>\n        </nav>\n      </header>\n      <main>\n        <Routes>\n          <Route path=\"/\" element={<></>}/>\n          <Route path=\"/snake\" element={<SnakeGame/>}/>\n          <Route path=\"/nonogram\" element={<NonogramGame/>}/>\n        </Routes>\n      </main>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <BrowserRouter>\n      <App/>\n    </BrowserRouter>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}